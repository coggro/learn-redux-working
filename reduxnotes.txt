01 - Setting Up Our Webpack Environment.mp4
    Need:
        NodeJS
        React Dev Tools
        Redux Dev Tools
        Terminal (iTerm2)
        npm install
    Download source repo and run npm i

02 - App Layout + Component Setup.mp4
    client folder contains app, starting in reduxtagram.js
    Styles folder contains all styles in stylus
    reduxtagram.js
        import React from "react";

        import { render } from "react-dom";

        // Import css
        import css from "./styles/style.styl";

        render(<p>Hi</p>, document.getElementById("root"));
    Create other components
        main
            Inside of that, chooses if it shows photo grid or single
        Each component lives in its own JS file in the components directory
        client/components/Main.js
            import React from "react";
            import { Link } from "react-router"; // make router links

            class Main extends React.Component {
                render() {
                    return (
                        <div>
                            <h1>
                                <Link to="/">Reduxtagram</Link>
                            </h1>
                        </div>
                    );
                }
            }

            export default Main;
        client/reduxtagram.js
            ...
            // Import Components
            import Main from "./components/Main";
            ...
            render(<Main />, document.getElementById("root"));

03 - Creating our Single and PhotoGrid components.mp4
    client/components/Single.js
        // Paste in main, pretty much the same setup
        import React from "react";

        class Single extends React.Component {
            render() {
                return <div className="single-photo" />;
            }
        }

        export default Single;
    client/components/PhotoGrid.js
        import React from "react";

        class PhotoGrid extends React.Component {
            render() {
                return <div className="photo-grid">I'm the photo grid</div>;
            }
        }

        export default PhotoGrid;
    Routing
        Actual switching out will be handled by react router, usually {this.props.children} ==> handled by react-router, but can't hand down props in that way
        Going to use {React.cloneElement(this.props.children, this.props)} in Main.js under h1
        Doesn't work without children
        Set up router, which will pass it children

04 - Setting up React Router.mp4
    client/reduxtagram.js
        ...
        // Import Components
        import Main from "./components/Main";
        import Single from "./components/Single"; // import other components
        import PhotoGrid from "./components/PhotoGrid";

        // import react router dependencies
        import { Router, Route, IndexRoute, browserHistory } from "react-router";

        const router = ( // build router with children
            <Router history={browserHistory}>
                <Route path="/" component={Main}> // import main at root
                    <IndexRoute component={PhotoGrid} /> // PhotoGrid when index
                    <Route path="/view/:postId" component={Single} /> // Single when
                </Route>
            </Router>
        );

        render(router, document.getElementById("root"));

05 - Creating our Redux Store.mp4
    First video to talk about Redux instead of just React
    All data for our app is in a store, rather than a state
    Not many components with many states, just one object with store.
    client/store.js
        import { createStore, compose } from "redux";
        import { syncHistoryWithStore } from "react-router-redux";
        import { browserHistory } from "react-router";

        // import the root reducer
        // will look at actions, what they do, and reducers
        import rootReducer from "./reducers/index";

        // sample data
        import comments from "./data/comments";
        import posts from "./data/posts";

        // Create an object for the default data.
        const defaultState = {
            posts,
            comments
        };

        // Create the store
        const store = createStore(rootReducer, defaultState);

        // Export history, then default export store
        export const history = syncHistoryWithStore(browserHistory, store);

        export default store;

06 - All About Redux Actions.mp4
    All about actions and action creators
    Action is something that happens in your app - click on a photo, likes a page, leaves a comment, etc.
    Whenever something happens, it dispatches an action, with 2 pieces of info
        1) Name of the action
        2) Payload of data required to execute action
    Reducers go in the opposite reaction - once you add the action, how do we actually update the data and let React handle the changes?
    client/actions/actionCreators.js
        // can be separate files, but don't have to be
        // incremement likes
        function increment(index) {
            return {
                type: "INCREMENT_LIKES",
                index
            };
        }

        // add comment
        function addComment(postId, author, comment) {
            return {
                type: "ADD_COMMENT",
                postID,
                author,
                comment
            };
        }

        // remove comment
        function removeComment(postId, i) {
            return {
                type: "REMOVE_COMMENT",
                i,
                postId
            };
        }
        // How do we do anything with that data when the action is dispatched?
        // With reducers.

07 - All About Redux Reducers.mp4
    Need to use reducers to actually update the state
    In browser, we can listen for events like click and hover
    We create reducers to listen for our action events - for every piece of state (posts, comments)
    client/reducers/posts.js
        function posts(state = [], action) {
            console.log(state, action);
            return state;
        }

        export default posts;
    client/reducers/comments.js
        function comments(state = [], action) {
            console.log(state, action);
            return state;
        }

        export default comments;
    client/reducers/index.js
        // this is the big daddy reducer

        import { combineReducers } from "redux";
        import { routerReducer } from "react-router-redux";

        import posts from "./posts";
        import comments from "./comments";

        const rootReducer = combineReducers({ posts, comments, router: routerReducer });

        export default rootReducer;

08 - Integrating our Store with React Router.mp4
    client/reduxtagram.js
        ...
        import { Provider } from 'react-redux'; // bindings allow us to use redux with react
        import store, { history } from './store';
        // This should allow you to see the state in the console log
        const router = (
            <Provider store={store}> // wrap entire router in provider
                <Router history={history}> // use history from store
                    <Route path="/" component={Main}>
                        <IndexRoute component={PhotoGrid} />
                        <Route path="/view/:postId" component={Single} />
                    </Route>
                </Router>
            </Provider>
        );

09 - Understanding The Reducer's Job and Dispatching Actions.mp4
    Go to react dev tools, select provider
    Go to console, run $r.store.dispatch({type: 'INCREMENT_LIKES', index: 0});
    See that posts and comments actions both ran
    Turns out Redux runs all actions, it's up to the reducer to decide if it executes
    That's where we're going to write a switch to handle all action types

10 - Accessing Dispatch and State with Redux.mp4
    How do we get our state to go into Main?
        Regular React passes it down every single level through props
        Redux lets us use connect, which allows us to inject that data at whatever level we actually need it
        Going to connect data to component we need and make the action creators.
        Can add infuse presentational component with action creators and data by kind of sprinkling another component on top.
    client/components/App.js
        import { bindActionCreators } from "redux"; // gets us the action creators on the component
        import { connect } from "react-redux"; // bypasses prop passing
        import * as actionCreators from "../actions/actionCreators"; // Gets us action creators as a variable
        import Main from "./Main"; // gets us main component

        function mapStateToProps(state) { // puts the parts of state we want in
            return {                      // an object
                posts: state.posts,
                comments: state.comments
            };
        }

        function mapDispatchToProps(dispatch) { // maps dispatch to something?
            return bindActionCreators(actionCreators, dispatch);
        }

        const App = connect( // app connects with state and dispatch to wrap
            mapStateToProps, // around Main, making action creators props of
            mapDispatchToProps  // Main
        )(Main);

        export default App;
    client/reduxtagram.js
        ...
        import App from "./components/App";
        ...
        const router = (
            <Provider store={store}>
                <Router history={history}>
                    <Route path="/" component={App}>
                        <IndexRoute component={PhotoGrid} />
                        <Route path="/view/:postId" component={Single} />
                    </Route>
                </Router>
            </Provider>
        );

11 - Displaying Redux State inside our Components.mp4
    client/components/Photo.js
        import React from "react";

        import { Link } from "react-router";

        import CSSTransitionGroup from "react-addons-css-transition-group";

        class Photo extends React.Component {
            render() {
                const { post, i, comments } = this.props; // make props vars
                return (                // available without this.props
                    <figure className="grid-figure">
                        <div className="grid-photo-wrap">
                            // Link lets us link with the router
                            <Link to={`/view/${post.code}`}>
                                <img
                                    src={post.display_src}
                                    alt={post.caption}
                                    className="grid-photo"
                                />
                            </Link>
                            <CSSTransitionGroup
                                transitionName="like"
                                transitionEnterTimeout={500}
                                transitionLeaveTimeout={500}
                            >
                                <span key={post.likes} className="likes-heart">
                                    {post.likes}
                                </span>
                            </CSSTransitionGroup>
                        </div>
                        <figcaption>
                            <p>{post.caption}</p>
                            <div className="control-buttons">
                                <button className="likes">&hearts; {post.likes}</button>
                                <Link className="button" to={`/view/${post.code}`}>
                                    <span className="comment-count">
                                        <span className="speech-bubble" />
                                        {comments[post.code]
                                            ? comments[post.code].length
                                            : 0}
                                    </span>
                                </Link>
                            </div>
                        </figcaption>
                    </figure>
                );
            }
        }

        export default Photo;

    client/components/PhotoGrid.js
        import React from "react";

        import Photo from "./Photo";

        class PhotoGrid extends React.Component {
            render() {
                return (
                    <div className="photo-grid">
                        // loop over posts to add Photo components
                        {this.props.posts.map((post, i) => (
                            // spreads out props, adds key and index value to
                            // access key in child, and individual post
                            <Photo {...this.props} key={i} i={i} post={post} />
                        ))}
                    </div>
                );
            }
        }

        export default PhotoGrid;

12 - Updating State with Reducers.mp4
    client/components/Photo.js
        ...
        // Emit the increment function event thing on click using bind
        <button
            onClick={this.props.increment.bind(null, i)}
            className="likes"
        >
            &hearts; {post.likes}
        </button>
        ...
    Redux and Functional Programming
        Redux uses functional programming
        Don't just increment the thing and return it
        Take a copy, modify it, and return new state
    Editing reducer
    client/reducers/posts.js
        function posts(state = [], action) {
            // only fire different things based on action type
            switch (action.type) {
                // increment likes
                case "INCREMENT_LIKES":
                    console.log("Incrementing Likes");
                    const i = action.index;
                    return [
                        ...state.slice(0, i), // before our update
                        { ...state[i], likes: state[i].likes + 1 }, // modify likes
                        ...state.slice(i + 1) // after our update
                    ];
                default:
                    return state;
            }
        }

        export default posts;

13 - Displaying the Single Photo Component.mp4
    Create single layout view, Single.js
    client/components/Single.js
        import React from "react";

        import Photo from "./Photo"; // re-use Photo
        import Comments from "./Comments"; // New component to handle comments

        class Single extends React.Component {
            render() {
                // index of the post
                const i = this.props.posts.findIndex(
                    post => post.code === this.props.params.postId
                );
                // get us the post
                const post = this.props.posts[i];
                return (
                    <div className="single-photo">
                        <Photo i={i} post={post} {...this.props} />
                        <Comments />
                    </div>
                );
            }
        }

        export default Single;
    client/components/Comments.js
        import React from "react";

        class Comments extends React.Component {
            render() {
                return <div className="comment">I'm the comments!</div>;
            }
        }

        export default Comments;


14 - Displaying and Adding Comments.mp4
    Tackle displaying comments in two parts:
        Get existing comments displaying
        Then add/delete
    Since we have them in props, we can use it from Single
    client/components/Single.js
        ...
        // Refactored out because it's used in multiple spots
        const { postId } = this.props.params;
        ...
        // gets us an array of comments on the post
        const postComments = this.props.comments[postId] || [];

        return (
            <div className="single-photo">
                ...
                <Comments postComments={postComments} />
            </div>
        );
    client/components/Comments.js
        import React from "react";

        class Comments extends React.Component {
            // render function over creating another component
            renderComment(comment, i) {
                return (
                    <div className="comment" key={i}>
                        <p>
                            <strong>{comment.user}</strong>
                            {comment.text}
                            <button className="remove-comment">&times;</button>
                        </p>
                    </div>
                );
            }
            render() {
                return (
                    <div className="comments">
                        // render out comments
                        {this.props.postComments.map(this.renderComment)}
                        // create form for new comments
                        <form ref="commentForm" className="comment-form">
                            <input type="text" ref="author" placeholder="Author" />
                            <input type="text" ref="comment" placeholder="Comment" />
                            <input type="submit" hidden />
                        </form>
                    </div>
                );
            }
        }

        export default Comments;


15 - Updating Comment State in our Store.mp4
    Hooking up a submit handler
    client/components/Comments.js
        import React from "react";

        class Comments extends React.Component {
            renderComment(comment, i) {
                return (
                    <div className="comment" key={i}>
                        <p>
                            <strong>{comment.user}</strong>
                            {comment.text}
                            <button className="remove-comment">&times;</button>
                        </p>
                    </div>
                );
            }
            handleSubmit(e) {
                e.preventDefault();
                console.log("submitting the form");
                console.log(this.refs);
            }
            render() {
                return (
                    <div className="comments">
                        {this.props.postComments.map(this.renderComment)}
                        <form
                            ref="commentForm"
                            className="comment-form"
                            onSubmit={this.handleSubmit}
                        >
                            <input type="text" ref="author" placeholder="Author" />
                            <input type="text" ref="comment" placeholder="Comment" />
                            <input type="submit" hidden />
                        </form>
                    </div>
                );
            }
        }

        export default Comments;



16 - Redux Reducer Composition.mp4


17 - Error Tracking and Insights with Sentry.mp4


18 - Hot Reloading Redux Reducers with webpack.mp4


19 - Learning Redux Dev Tools.mp4


20 - Wrap Up and Next Steps.mp4
